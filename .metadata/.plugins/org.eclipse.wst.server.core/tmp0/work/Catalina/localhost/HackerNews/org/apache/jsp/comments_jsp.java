/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-10-19 13:41:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.net.URI;
import java.util.ArrayList;
import java.util.Iterator;
import com.example.newest.Comments;
import com.example.newest.Posts;

public final class comments_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


String timeDiff(Long timeStamp){
	long epoch = System.currentTimeMillis()/1000;
	long difference = epoch - timeStamp;
	if(difference/86400>0)return (difference/86400) + " days ago";    
	if(difference/3600>0) return (difference/3600) + " hours ago";
	if (difference/60>0) return (difference/60) + " minutes ago";
	return (difference) + " seconds ago";
}
String getDomainName(String url){
	URI uri;
	try{
		uri = new URI(url);
		String host = uri.getHost();
		String domainName = host.startsWith("www.") ? host.substring(4) : host;
		return "(" + domainName + ")";
	}catch(Exception e){
		System.out.println(e);
	}
	return "";
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.example.newest.Posts");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.net.URI");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.example.newest.Comments");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Hacker News</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h4> <a href =\"newest\">new</a>&nbsp;|&nbsp;<a href =\"dbnewest\">new from DB</a>&nbsp;|&nbsp;<a href =\"\">past</a>&nbsp;|&nbsp;<a href =\"\">comments</a>&nbsp;|&nbsp;<a href =\"\">ask</a>&nbsp;|&nbsp;<a href =\"\">show</a>&nbsp;|&nbsp;<a href =\"\">jobs</a>&nbsp;|&nbsp;<a href =\"\">submit</a></h4>\r\n");
      out.write("<h2>Post</h2>\r\n");
 Posts pItem = (Posts) request.getAttribute("post"); 
      out.write("\r\n");
      out.write("<span><a href =\"");
      out.print(pItem.getUrl());
      out.write('"');
      out.write('>');
      out.print( pItem.getTitle() );
      out.write("</a> ");
      out.print( getDomainName(pItem.getUrl()));
      out.write(" </span>\r\n");
      out.write("            <p>");
      out.print(pItem.getScore());
      out.write(" point &nbsp; Posted by ");
      out.print(pItem.getBy() );
      out.write(" &nbsp; ");
      out.print( timeDiff(pItem.getTime()) );
      out.write("</p>\r\n");
      out.write("            ");
if(pItem.getText()!=null){
      out.write('<');
      out.write('p');
      out.write('>');
      out.print( pItem.getText());
      out.write("</p>");
}
      out.write("\r\n");
      out.write("<h2>Comments</h2>\r\n");
      out.write("<ul>\r\n");
      out.write("     ");

    ArrayList<Comments> commentList = (ArrayList<Comments>)request.getAttribute("commentList");

    if (commentList != null) {
        Iterator<Comments> iterator = commentList.iterator();
        while (iterator.hasNext()) {
            Comments cItem = iterator.next();

      out.write("\r\n");
      out.write("            <li><p>");
      out.print(cItem.getBy());
      out.write(" &nbsp;");
      out.print( timeDiff(cItem.getTime()) );
      out.write("</p>\r\n");
      out.write("            <p>");
      out.print(cItem.getText() );
      out.write("</p>\r\n");
      out.write("            <p>");
if(cItem.getKids()!=null&&cItem.getKids().size()>0){
      out.write(" &nbsp; <a href = \"\"> ");
      out.print(cItem.getKids().size());
      out.write(" replies</a>");
}
      out.write("</p></li>\r\n");

        }
    }

      out.write("\r\n");
      out.write("</ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
